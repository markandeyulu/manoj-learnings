#internal server tomcat port  ( other 2 servers also available. This is default )
#server.port=8181
#usercontext we can set here
server.servlet.context-path=/manoj
#if you have YML also , if you have same entry in both, .properties entry will be considered

#profile. to tell which property to pick up. you can have multiple, in thsi case if you have same value, last order will picked up.
spring.profiles.active=test,dev

# same like what we did in Spring contentnegotiation - too cluttered there

#extenstion - .xml .json , need jackson jar 
spring.mvc.contentnegotiation.favor-path-extension=true 
#query parameter allowed
spring.mvc.contentnegotiation.favor-parameter=true
#query parameter mediaType allowed
spring.mvc.contentnegotiation.parameter-name=mediaType
spring.mvc.pathmatch.use-registered-suffix-pattern=true



#In menory DB. Servlet webServlet mapped to [/h2-console/*] after this. 
#URL - http://localhost:8383/manoj//h2-console/login.jsp?jsessionid=5c9eebf48349d835c25f42f5b3b0fdc3. browser based interaction.
#Imp - Thorugh autoconfiguration, defaultly the data source will be created. We dont need to create data source also. If its default config (test schema) it will take automatically.
		#if we comment this H2 DB console not coming - why ?
		spring.h2.console.enabled=true
# to change the path from h2-console to h2
#Datasource properties
#		spring.h2.console.path=/h2
		# This is the default H2 DB
#		spring.datasource.url=jdbc:h2:mem:~/testdb
#		spring.datasource.username=sa
#		spring.datasource.password=
#		spring.datasource.driver-class-name=org.h2.Driver


spring.datasource.url=jdbc:mysql://localhost:3306/productdb
spring.datasource.username=root
spring.datasource.password=Welcome@123
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

#once the application is down, h2 mem data(in memory schema - should be used only for testing) will be lost. but the h2 test (manual schema) will not lost

#Flow to connect DB and run queries through JPA
#1. Enitity class
#2. Available for Hibernate
#3. Session Factory
#4. Session
#5. CRUD


#spring data JPA can easily tieup with hibernate(here its h2)
#hibernate(JPA) properties
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create
#springbootdatajps jar is using hibernate(vendor product) core as well. and jdbc as well. ORM and JDBC also also advanced JPA(Oracle java product).

#same like @addannotatedclass. It will scan all the child and check for @entity class. 
#your own name
sessionFactory.packagestoscan = com